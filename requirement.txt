Case Study: Library Management System 
(LMS)
1. Overview
The Library Management System (LMS) automates library operations such as catalog 
management, member registration, book lending/returns, fine calculation, and reporting. 
It provides role-based access for Admin, Librarian, and Members, ensuring secure access with 
JWT authenticationand offering a responsive React UI integrated with Spring Boot REST APIs.
2. Scope
â€¢ Admin:
â—¦Add/Remove/Update books
â—¦Manage members (add/update/remove)
â—¦Track issued/returned books
â—¦Generate reports (most borrowed books, overdue reports)
â€¢ Librarian:
â—¦Issue/Return books
â—¦Manage fines & payments
â—¦Assist members with catalog
â€¢ Member:
â—¦Search catalog (filters: title, author, category)
â—¦Borrow & return books
â—¦Reserve unavailable books
â—¦View transaction history
3. Tech Stack
â€¢ Backend: Spring Boot, Spring Security + JWT, Hibernate/JPA, Swagger
â€¢ Frontend: React (Hooks, Axios), Bootstrap for UI styling
â€¢ Database: MySQL
â€¢ Middleware/Integration: Node.js (for notification & cron jobs like due-date reminders)
â€¢ API Documentation: Swagger UI
4. System Architecture
â€¢ React Frontend â†’ Axios â†’ Spring Boot REST API â†’ MySQL DB
â€¢ JWT Security Layer:
â—¦Role-based authentication (Admin, Librarian, Member)
5. Key Features with API Integration
ðŸ”¹ Authentication & Security
â€¢ Login API: POST /auth/login
â€¢ Register API: POST /auth/register
â€¢ JWT Security: Token-based authorization for all requests.
ðŸ”¹ Book Management
â€¢ Add Book (Admin): POST /api/books
â€¢ Get All Books: GET /api/books
â€¢ Search Book by Title/Author: GET /api/books/search?title=Java
â€¢ Remove Book: DELETE /api/books/{id}
ðŸ”¹ Member Management
â€¢ Add Member: POST /api/members
â€¢ Get All Members: GET /api/members
â€¢ Update Member: PUT /api/members/{id}
â€¢ Delete Member: DELETE /api/members/{id}
ðŸ”¹ Lending & Returns
â€¢ Issue Book: POST /api/lending/issue
â€¢ Return Book: POST /api/lending/return
â€¢ Track Due Date: GET /api/lending/due/{memberId}
ðŸ”¹ Fine Management
â€¢ Calculate Fine: GET /api/fines/calculate/{memberId}
â€¢ Pay Fine: POST /api/fines/pay
ðŸ”¹ Reports
â€¢ Most Borrowed Books: GET /api/reports/most-borrowed
â€¢ Overdue Books: GET /api/reports/overdue
6. Swagger Integration
â€¢ Spring Boot integrates Swagger (springdoc-openapi-ui)
â€¢ Access APIs at: http://localhost:8080/swagger-ui.html
â€¢ Provides documentation for all LMS endpoints with request/response samples
7. Frontend (React + Bootstrap)
â€¢ Login & Register Page: JWT authentication stored in localStorage
â€¢ Dashboard: Role-based UI (Admin, Librarian, Member)
â€¢ Book Catalog: Search & filter books
â€¢ Issue/Return Page: Librarian module
â€¢ Reports Page: Charts (using Recharts library)
8. Sample Folder Structure
ðŸ“‚ Backend (Spring Boot)
lms-backend/
 â”œâ”€â”€ src/main/java/com/lms
 â”‚    â”œâ”€â”€ controller   # REST Controllers
 â”‚    â”œâ”€â”€ service      # Business logic
 â”‚    â”œâ”€â”€ repository   # JPA Repositories
 â”‚    â”œâ”€â”€ model        # Entities (Book, Member, Loan, Fine)
 â”‚    â”œâ”€â”€ security     # JWT Config
 â”‚    â””â”€â”€ exception    # Custom Exceptions
 â””â”€â”€ src/main/resources
      â”œâ”€â”€ application.properties
      â””â”€â”€ data.sql
ðŸ“‚ Frontend (React + Bootstrap)
lms-frontend/
 â”œâ”€â”€ src/
 â”‚   â”œâ”€â”€ components/
 â”‚   â”‚   â”œâ”€â”€ Login.js
 â”‚   â”‚   â”œâ”€â”€ Dashboard.js
 â”‚   â”‚   â”œâ”€â”€ BookCatalog.js
 â”‚   â”‚   â”œâ”€â”€ IssueReturn.js
 â”‚   â”‚   â””â”€â”€ Reports.js
 â”‚   â”œâ”€â”€ services/ (Axios API calls)
 â”‚   â””â”€â”€ App.js
9. Security Implementation (Spring Boot + JWT)
â€¢ Login generates JWT â†’ stored in React localStorage.
â€¢ Axios Interceptor â†’ attaches JWT token in headers for API calls.
â€¢ Role-based access:
â—¦/api/admin/** â†’ ADMIN only
â—¦/api/librarian/** â†’ LIBRARIAN only
â—¦/api/member/** â†’ MEMBER
10. Benefits
âœ… Centralized and automated library operations 
âœ… Secure authentication and role-based authorization 
âœ… Easy API documentation with Swagger 
âœ… Responsive UI with React + Bootstrap 
âœ… Scalable architecture with modular services